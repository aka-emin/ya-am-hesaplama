from PyQt5.QtWidgets import (QApplication, QDialog, QFileDialog, QMenu, 
                            QPushButton, QComboBox, QTextBrowser, QSizePolicy)
from PyQt5.QtGui import QTextCharFormat, QColor, QFont
from PyQt5.QtCore import Qt, QSize, QRect
import sys
import re

class TextFormatter:
    def __init__(self):
        self.color_map = {
            "kırmızı": QColor(255, 0, 0),
            "mavi": QColor(0, 0, 255),
            "sarı": QColor(255, 255, 0),
            "yeşil": QColor(0, 128, 0),
            "beyaz": QColor(255, 255, 255),
            "siyah": QColor(0, 0, 0),
            "mor": QColor(128, 0, 128),
            "pembe": QColor(255, 192, 203),
            "kahverengi": QColor(165, 42, 42),
            "gri": QColor(128, 128, 128)
        }
    
    def _apply_format(self, text_browser, format_func):
        cursor = text_browser.textCursor()
        char_format = cursor.charFormat()
        format_func(char_format)
        cursor.setCharFormat(char_format)
        text_browser.setTextCursor(cursor)
        
    def set_font_size(self, text_browser, size):
        def update_format(char_format):
            char_format.setFontPointSize(size)
        self._apply_format(text_browser, update_format)
    
    def set_font_italic(self, text_browser, italic):
        def update_format(char_format):
            char_format.setFontItalic(italic)
        self._apply_format(text_browser, update_format)
    
    def set_font_bold(self, text_browser, bold):
        def update_format(char_format):
            char_format.setFontWeight(QFont.Bold if bold else QFont.Normal)
        self._apply_format(text_browser, update_format)
    
    def reset_font_style(self, text_browser):
        def update_format(char_format):
            char_format.setFontItalic(False)
            char_format.setFontWeight(QFont.Normal)
        self._apply_format(text_browser, update_format)
    
    def set_font_color(self, text_browser, color_name):
        if color_name in self.color_map:
            def update_format(char_format):
                char_format.setForeground(self.color_map[color_name])
            self._apply_format(text_browser, update_format)
    
    def set_text_alignment(self, text_browser, alignment):
        cursor = text_browser.textCursor()
        block_format = cursor.blockFormat()
        block_format.setAlignment(alignment)
        cursor.mergeBlockFormat(block_format)
        text_browser.setTextCursor(cursor)

class FileManager:
    def __init__(self):
        self.current_file = None
        
    def open_file(self, parent):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(
            parent,
            "Dosya Aç",
            "",
            "Text Files (*.txt);;HTML Files (*.html);;All Files (*)",
            options=options
        )
        
        if file_name:
            self.current_file = file_name
            try:
                with open(file_name, 'r', encoding='utf-8') as file:
                    content = file.read()
                    if file_name.lower().endswith('.html'):
                        return content
                    else:
                        return f"<p>{content}</p>"
            except Exception as e:
                print(f"Error opening file: {e}")
                return None
        return None
    
    def save_file(self, parent, content):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(
            parent,
            "Dosya Kaydet",
            "",
            "HTML Files (*.html);;Text Files (*.txt);;All Files (*)",
            options=options
        )
        
        if file_name:
            self.current_file = file_name
            try:
                with open(file_name, 'w', encoding='utf-8') as file:
                    if file_name.lower().endswith('.txt'):
                        content = re.sub(r'<[^>]*>', '', content)
                    file.write(content)
                return True
            except Exception as e:
                print(f"Error saving file: {e}")
                return False
        return False

class TextEditor(QDialog):
    def __init__(self):
        super(TextEditor, self).__init__()
        self.setupUi()
        self.file_manager = FileManager()
        self.text_formatter = TextFormatter()
        self._connectSignals()
        self.setWindowTitle("Modern Text Editor")
        self.resize(600, 400)
        
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f5f5;
            }
            QTextBrowser {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            QPushButton {
                background-color: #4a86e8;
                color: white;
                border: none;
                border-radius: 2px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #3d76cc;
            }
            QComboBox {
                border: 1px solid #ccc;
                border-radius: 2px;
                padding: 1px 18px 1px 3px;
                background-color: white;
                min-width: 80px;
            }
        """)
        
    def setupUi(self):
        # File operations combo box
        self.comboBox_2 = QComboBox(self)
        self.comboBox_2.setGeometry(QRect(10, 10, 120, 30))
        self.comboBox_2.addItem("Dosya İşlemleri")
        self.comboBox_2.addItem("Yeni dosya")
        self.comboBox_2.addItem("Dosya aç")
        self.comboBox_2.addItem("Kaydet")
        
        # Font size combo box
        self.comboBox = QComboBox(self)
        self.comboBox.setGeometry(QRect(140, 10, 80, 30))
        self.comboBox.addItem("Yazı boyutu")
        for i in range(8, 32, 2):
            self.comboBox.addItem(str(i))
            
        # Text color combo box
        self.comboBox_4 = QComboBox(self)
        self.comboBox_4.setGeometry(QRect(230, 10, 100, 30))
        self.comboBox_4.addItem("Renk")
        self.comboBox_4.addItem("kırmızı")
        self.comboBox_4.addItem("mavi")
        self.comboBox_4.addItem("sarı")
        self.comboBox_4.addItem("yeşil")
        self.comboBox_4.addItem("beyaz")
        self.comboBox_4.addItem("siyah")
        self.comboBox_4.addItem("mor")
        self.comboBox_4.addItem("pembe")
        self.comboBox_4.addItem("kahverengi")
        self.comboBox_4.addItem("gri")
        
        # Text style combo box
        self.comboBox_3 = QComboBox(self)
        self.comboBox_3.setGeometry(QRect(340, 10, 100, 30))
        self.comboBox_3.addItem("Stil")
        self.comboBox_3.addItem("İtalik")
        self.comboBox_3.addItem("Kalın")
        self.comboBox_3.addItem("Normal")
        
        # Action buttons
        self.pushButton_5 = QPushButton("Kopyala", self)
        self.pushButton_5.setGeometry(QRect(450, 10, 80, 30))
        
        self.pushButton_6 = QPushButton("Yapıştır", self)
        self.pushButton_6.setGeometry(QRect(540, 10, 80, 30))
        
        self.pushButton_7 = QPushButton("Sil", self)
        self.pushButton_7.setGeometry(QRect(450, 50, 80, 30))
        
        self.pushButton_8 = QPushButton("Hizala", self)
        self.pushButton_8.setGeometry(QRect(540, 50, 80, 30))
        
        # Text browser
        self.textBrowser = QTextBrowser(self)
        self.textBrowser.setGeometry(QRect(10, 90, 580, 300))
        self.textBrowser.setReadOnly(False)
        
    def _connectSignals(self):
        self.comboBox_2.activated.connect(self._handleFileOperations)
        self.comboBox.activated.connect(self._handleFontSize)
        self.comboBox_3.activated.connect(self._handleFontStyle)
        self.comboBox_4.activated.connect(self._handleFontColor)
        self.pushButton_5.clicked.connect(self._handleCopy)
        self.pushButton_6.clicked.connect(self._handlePaste)
        self.pushButton_7.clicked.connect(self._handleDelete)
        self.pushButton_8.clicked.connect(self._handleAlign)
        
    def _handleFileOperations(self, index):
        if index == 1:  # New file
            self.textBrowser.clear()
            self.file_manager.current_file = None
        elif index == 2:  # Open file
            content = self.file_manager.open_file(self)
            if content:
                self.textBrowser.setHtml(content)
        elif index == 3:  # Save file
            self.file_manager.save_file(self, self.textBrowser.toHtml())
        self.comboBox_2.setCurrentIndex(0)
            
    def _handleFontSize(self, index):
        if index > 0:
            size = int(self.comboBox.itemText(index))
            self.text_formatter.set_font_size(self.textBrowser, size)
    
    def _handleFontStyle(self, index):
        if index == 1:
            self.text_formatter.set_font_italic(self.textBrowser, True)
        elif index == 2:
            self.text_formatter.set_font_bold(self.textBrowser, True)
        elif index == 3:
            self.text_formatter.reset_font_style(self.textBrowser)
    
    def _handleFontColor(self, index):
        if index > 0:
            color_name = self.comboBox_4.itemText(index)
            self.text_formatter.set_font_color(self.textBrowser, color_name)
    
    def _handleCopy(self):
        self.textBrowser.copy()
    
    def _handlePaste(self):
        self.textBrowser.paste()
    
    def _handleDelete(self):
        cursor = self.textBrowser.textCursor()
        if cursor.hasSelection():
            cursor.removeSelectedText()
        else:
            cursor.deleteChar()
    
    def _handleAlign(self):
        alignment_menu = QMenu(self)
        alignment_menu.addAction("Sola Hizala", lambda: self._setTextAlignment(Qt.AlignLeft))
        alignment_menu.addAction("Ortala", lambda: self._setTextAlignment(Qt.AlignCenter))
        alignment_menu.addAction("Sağa Hizala", lambda: self._setTextAlignment(Qt.AlignRight))
        alignment_menu.addAction("İki Yana Yasla", lambda: self._setTextAlignment(Qt.AlignJustify))
        alignment_menu.exec_(self.pushButton_8.mapToGlobal(QPoint(0, self.pushButton_8.height())))
    
    def _setTextAlignment(self, alignment):
        self.text_formatter.set_text_alignment(self.textBrowser, alignment)

def main():
    app = QApplication(sys.argv)
    editor = TextEditor()
    editor.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()